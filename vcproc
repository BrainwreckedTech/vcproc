#!/bin/bash

# Â© 2016-2017 Paul A. Hinchberger III aka BrainwreckedTech.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

MISSDP=false

! command -v dialog &> /dev/null && echo "Could not find dialog" && MISSDP=true
! command -v ffmpeg &> /dev/null && echo "Could not find ffmpeg" && MISSDP=true
! command -v mediainfo &> /dev/null && echo "Could not find mediainfo" && MISSDP=true
! command -v mpv &> /dev/null && echo "Could not find mpv" && MISSDP=true
! command -v bc &> /dev/null && echo "Could not find bc" && MISSDP=true

${MISSDP} && exit 1

CLBOLD="$(tput bold)"
CLNORM="$(tput sgr0)"
FFOPTS="-y -v info -stats"
FFOPTS="-y -v fatal -stats"
SCRPNM="$(basename "${0}")"
TMPDIR="/tmp/vcproc-${USER}"

CRPTOP=0
CRPLFT=0
CRPBTM=0
CRPRIT=0

grep -q 'PRETTY_NAME="Ubuntu ..\...\.. LTS"' /etc/os-release && \
grep -q 'Linux version .*-Microsoft (Microsoft@Microsoft.com)' /proc/version && \
ON_WSL=true || ON_WSL=false

[ -z ${DISPLAY+x} ] && DLGBIN=dialog || DLGBIN=Xdialog
DLGBIN=dialog

function pak {
  read -r -n1 -r -s -p 'Press any key to continue...'
}

function putib {
  printf "[%011.2f]" "$(cut -d\  -f1 < /proc/uptime)"
}

function msg() {
  echo "${CLBOLD}$(putib) ${1}${CLNORM}"
}

function tc2sec() {
  printf "%01.3f" "$((10#${1:0:2} * 3600 + 10#${1:3:2} * 60 + 10#${1:6:2})).${1:9:3}"
}

function sec2tc() {
  WHLS=$(printf "%01d" "${1%\.*}")
  MILS="$(( 10#${1#*\.} + 0 ))"

  ((HOUR=${WHLS}/3600))
  ((MINS=(${WHLS}%3600)/60))
  ((SECS=${WHLS}%60))
  printf "%02d:%02d:%02d.%03d" ${HOUR} ${MINS} ${SECS} ${MILS}
}

function istc() {
  [[ ${1} =~ ^[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}$ ]] && return 0 || return 1
}

function get_file_dialog() {
  RESULT=""
  while [ ! -s "${RESULT}" -o "${RESULT}" == "" ]; do
    RESULT="$(${DLGBIN} --stdout --title ' Select video file to work on: ' --fselect "${1}" 10 72)"
  done
  echo "${RESULT}"
}

function list_video_files {
  echo "$(find -maxdepth 1 -regextype posix-extended -regex '\.\/[[:print:]]+\.(3gp|3g2|asf|avi|divx|evo|f4v|flv|m2p|mkv|mka|mks|mcf|mp4|mov|mpeg|mpg|mxf|ogg|ps|ts|qt|rmvb|vob|webm|wma|wmv)' | sed 's:^\./::g')"
}

mkdir -p "${TMPDIR}"

CFGFLS=()
WALKED=

[ -s "${HOME}/.config/vcproc/${SCRPNM}.cfg" ] && CFGFLS+=("${HOME}/.config/vcproc/${SCRPNM}.cfg")
while true; do
  [ "${WALKED}" == "${PWD}" ] && break
  TOWALK="${PWD#${WALKED}/}"
  WALKIN="${WALKED}/${TOWALK%%/*}"
  [ -s "${WALKIN}/${SCRPNM}.cfg" ] && CFGFLS+=("${WALKIN}/${SCRPNM}.cfg")
  WALKED="${WALKIN}"
done

for VCPCFG in "${CFGFLS[@]}"; do
  tr '\r' '\n' < "${VCPCFG}" > ${TMPDIR}/${SCRPNM}.unix
  sed -i '/^$/d' ${TMPDIR}/${SCRPNM}.unix
  touch -d "$(date -R -r "${VCPCFG}")" "${TMPDIR}/${SCRPNM}.unix"
  mv ${TMPDIR}/${SCRPNM}.unix "${VCPCFG}"

  while IFS='= ' read -r lhs rhs; do
    if [[ ! $lhs =~ ^\ *# && -n $lhs ]]; then
      rhs="${rhs%%\#*}"             # Del in line right comments
      rhs="${rhs%"${rhs##*[^ ]}"}"  # Del trailing spaces
      rhs="${rhs%\"*}"              # Del opening string quotes
      rhs="${rhs#\"*}"              # Del closing string quotes
      declare $lhs="$rhs"
    fi
  done < "${VCPCFG}"

  if [ ! -z ${VIP_TC+X} ]; then
    istc "${VIP_TC}" || { echo "Invalid Video In Point Time Code. Must be HH:MM:SS.NNN"; exit 1; }
    VIPSEC="$(tc2sec "${VIP_TC}")"
  fi

  if [ ! -z ${VOP_TC+X} ]; then
    istc "${VOP_TC}" || { echo "Invalid Video Out Point Time Code. Must be HH:MM:SS.NNN"; exit 1; }
    VOPSEC="$(tc2sec "${VOP_TC}")"
  fi

  if [ -n "${OPWIDE}" ] && [ -n "${OPHIGH}" ] && \
     [ -n "${IPCRNG}" ] && [ -n "${OPCRNG}" ] && [ -n "${FRMRAT}" ]; then
    GOPLEN="-g $(echo "( ${FRMRAT} + 1 ) / 2" | bc)"
    if [ "${1}" == "dvd" ]; then
     OPWIDE=720; OPHIGH=480;
    fi
    if [ ${CRPTOP} == 0 -a ${CRPLFT} == 0 -a ${CRPBTM} == 0 -a ${CRPRIT} == 0 ]; then
      CRPFLT=
    else
      OVWIDE=$(mediainfo "${VDOFIL}" | grep Width | sed 's/\([[:digit:]]\) \([[:digit:]]\)/\1\2/g;s/.*: \([[:digit:]]\+\) pixels/\1/g')
      OVHIGH=$(mediainfo "${VDOFIL}" | grep Height | sed 's/\([[:digit:]]\) \([[:digit:]]\)/\1\2/g;s/.*: \([[:digit:]]\+\) pixels/\1/g')
      CRWIDE=$(( ${OVWIDE} - ${CRPLFT} - ${CRPRIT} - 1))
      CRHIGH=$(( ${OVHIGH} - ${CRPTOP} - ${CRPBTM} - 1))
      CRPFLT="crop=${CRWIDE}:${CRHIGH}:$((${CRPLFT}+1)):$((${CRPTOP}+1)),"
    fi
    V_FLTR="${CRPFLT}scale=width=${OPWIDE}:height=${OPHIGH}:in_range=${IPCRNG}:out_range=${OPCRNG},fps=fps=${FRMRAT},setdar=dar=${VDODAR/\//:}"
  fi

  [ -n "${VIPSEC}" ] && [ -n "${VOPSEC}" ] && DURATN=$(bc <<< "${VOPSEC} - ${VIPSEC}")
  [ -n "${ADPEAK}" ] && [ -n "${MTLEAD}" ] && A_FLTR="volume=${ADPEAK}dB,volume=enable=between'(t,0,${MTLEAD})':volume=0"

  OPSET1="-preset slower -refs 12"
  YTVSET="-bf 2 ${GOPLEN} -flags +cgop -movflags faststart"
  OPSET2="-pix_fmt yuv420p -profile:v high -level 4.2"
  YTASET="-strict 2 -b:a 384k -r:a 48000"
done

[[ "|normalize|preview|vcap|youtube|portable|lossless|join|" == *"|${1}|"* ]] && [[ ! -s ${1}.mp4 ]] && touch ${1}.mp4

if [[ "|portable|youtube|" == *"|${1}|"* ]]; then
  touch ${1}.mp4
  if [ -z ${USETMP+X} ]; then
    WRKFIL="${VDOFIL}"
    OUTFIL="${1}.mp4"
  else
    WRKFIL="${TMPDIR}/${VDOFIL}"
    OUTFIL="${TMPDIR}/${1}.mp4"
    msg "Copying ${VDOFIL} to ${WRKFIL}..."
    cp "${VDOFIL}" "${WRKFIL}"
  fi
fi

case ${1} in

  remux)

    if [ -n "${2}" ] && [ -s "${2}" ]; then
      VDOFIL="${2}"
    elif [ -z ${VDOFIL+x} ]; then
      VDOFIL="$(list_video_files)"
      if [ "$(echo -n "${VDOFIL}" | wc -l)" -eq "0" ]; then
        [ -n "${VDOFIL}" ] && msg "Found file ${VDOFIL}" || VDOFIL="$(get_file_dialog)"
      else
        VDOFIL="$(get_file_dialog)"
      fi    fi

    VDOEXT="${VDOFIL##*.}"

    msg "Remuxing ${VDOFIL}..."
    ffmpeg ${FFOPTS} -i "${VDOFIL}" -c:v copy -c:a copy -avoid_negative_ts make_zero "tmp.${VDOEXT}"
    mv "tmp.${VDOEXT}" "remux.${VDOEXT}"
    msg 'Remuxing complete.'
    ;;

  trim)

    [[ -z ${SLACKTIME+X} ]] && SLCKTM=3 || SLCKTM=${SLACTIME} # Number of extra seconds to keep when trimming

    shift
    ! [[ -s "${1}" ]] && echo "${1} does not exist." && exit 1
    VDOFIL="${1}"

    mpv --osd-fractions --osd-level=2 --loop=inf --pause "${VDOFIL}" &>/dev/null &
    TCCNCL=false
    VIPSEC=()
    VOPSEC=()

    while true; do
      HLPMSG="Video #$(( ${#VIPSEC[@]} + 1 ))\n\nYou can do multiple trims in one go.\n\nEnter time codes in HH:MM:SS.sss format.\n\nPress Cancel when you are finished."
      TIMCDS="$(${DLGBIN} --stdout --title 'In/Out Points' --form "${HLPMSG}" 15 45 0 " In Point:" 1 1 "${TM_CDS%-*}" 1 12 13 0 "Out Point:" 2 1 "${TM_CDS#*-}" 2 12 13 0)"
      if [ ${?} -eq 0 ]; then
        TM_CDS=$(echo "${TIMCDS}" | tr '\n' '-' | sed 's/-$//g')
        if istc "${TM_CDS%-*}" && istc "${TM_CDS#*-}"; then
          VIPSEC+=("$(tc2sec "${TM_CDS%-*}")")
          VOPSEC+=("$(tc2sec "${TM_CDS#*-}")")
          TIMCDS=
          TM_CDS=
        else
          ${DLGBIN} --title 'OOPS!' --msgbox "${TIMCDS} are invalid time codes.  Try again." 0 0
        fi
      elif [ ${?} -eq 1 ]; then
        break
      fi
    done

    OFFSET=0

    for (( LPCNTR=0; LPCNTR<${#VIPSEC[@]}; LPCNTR++ )); do

      msg "WORKING ON VIDEO $(( ${LPCNTR} + 1 )) OF ${#VIPSEC[@]}"

      for VDOFIL in "$@"; do

        VDOEXT="${VDOFIL##*.}"

        for IFDRTN in 5 20 35; do
          [[ $(bc <<< "${VIPSEC[${LPCNTR}]} < ${IFDRTN}") == 1 ]] && RISTRT=0 || RISTRT=$(bc <<< "${VIPSEC[${LPCNTR}]} - ${IFDRTN}")
          RISTOP="$(bc <<< "${VIPSEC[${LPCNTR}]} + ${IFDRTN}")"
          [[ $(bc <<< "${RISTOP} > ${VOPSEC[${LPCNTR}]}") == 1 ]] && RISTOP="${VOPSEC[${LPCNTR}]}"
          RIDRTN="$(bc <<< "${RISTOP} - ${RISTRT}")"

          msg "Generating list of I-frames from ${RISTRT}s to ${RISTOP}s (duration ${RIDRTN})..."
          ffprobe -v fatal -select_streams v -show_frames -show_entries frame=pict_type,pkt_pts_time -read_intervals "0${RISTRT}%+0${RIDRTN}" -of csv "${VDOFIL}" | grep I | cut -d, -f2 > ${TMPDIR}/original.ift
          msg 'Generation completed.'

          [ -s ${TMPDIR}/original.ift ] && break
        done

        STRTTM=$(ffprobe -v fatal -select_streams v -show_streams -show_entries stream=start_time -of csv "${VDOFIL}" | grep program | cut -d, -f3 | tr -d '\n')
        [ "${STRTTM}" == "" ] && STRTTM=0
        msg "Stream time stamps start at ${STRTTM}s -- adjusting time stamps..."

        while read -r FRAME; do
          bc <<< "${FRAME} - ${STRTTM}" | xargs printf '%01.3f\n'
        done < ${TMPDIR}/original.ift > ${TMPDIR}/original.ifl
        rm ${TMPDIR}/original.ift
        msg 'I-frame list generation complete.'

        msg "Calculating closest I-frame before in-point less ${SLCKTM} seconds..."
        cp ${TMPDIR}/original.ifl ${TMPDIR}/original.ifc
        bc <<< "${VIPSEC[${LPCNTR}]} - ${SLCKTM}" >> ${TMPDIR}/original.ifc
        sort -n ${TMPDIR}/original.ifc > ${TMPDIR}/original.ifs
        rm ${TMPDIR}/original.ifc
        TIPSEC=$(grep -B 1 "$(bc <<< "${VIPSEC[${LPCNTR}]} - ${SLCKTM}")" ${TMPDIR}/original.ifs | head -1 | tr -d '\n')
        msg "Closest I-frame before ${VIPSEC[${LPCNTR}]}s is ${TIPSEC}s"
        rm ${TMPDIR}/original.ifs
        TOPSEC=$(bc <<< "${VOPSEC[${LPCNTR}]} + ${SLCKTM}")
        TRMDUR=$(bc <<< "${TOPSEC} - ${TIPSEC}")

        msg "Trimming original video from ${TIPSEC}s for ${TRMDUR}s..."
        ffmpeg ${FFOPTS} -i "${VDOFIL}" -ss "${TIPSEC}" -to "${TOPSEC}"-c:v copy -c:a copy -avoid_negative_ts make_zero "tmp.${VDOEXT}"

        while true; do
          if [ -e ${VDOFIL%.*}_trim_$(printf "%03d" "$((${LPCNTR}+${OFFSET}+1))").${VDOEXT} ]; then
            ((OFFSET+=1))
          else
            break
          fi
        done

        mv "tmp.${VDOEXT}" "${VDOFIL%.*}_trim_$(printf "%03d" "$((${LPCNTR}+${OFFSET}+1))").${VDOEXT}"
        msg 'Cleaning up.'
        rm ${TMPDIR}/original.ifl

      done
    done

    [[ $(( ${#VIPSEC[@]} + ${OFFSET} )) == 1 ]] && rename '_trim_001' '_trim' *_trim_???.*

    ;;

  set)

    function ask_copy_cfg() {

      SETING="$(grep -q "${1}=" ${SCRPNM}.cfg 2> /dev/null)"
      [[ "${SETING}" == "" ]] && return 1
      echo "Found: ${SETING}"
      read -p "Do you want to copy this setting from existing ${SCRPNM}.cfg? [y/N] " RESULT
      if [ "${RESULT,,}" == "y" ]; then
        eval "$(printf '%q' "${SETING}")"
        echo "${SETING}" >> ${TMPDIR}/${SCRPNM}.tmp
      else
        return  1
      fi
    }

    [[ -s ${SCRPNM}.cfg ]] && msg 'Existing ${SCRPNM}.cfg file found.'

    if [ -n "${2}" ] && [ -s "${2}" ]; then
      VDOFIL="${2}"
    elif [ -z ${VDOFIL+x} ]; then
      VDOFIL="$(list_video_files)"
      if [ "$(echo -n "${VDOFIL}" | wc -l)" -eq "0" ]; then
        [ -n "${VDOFIL}" ] && msg "Found file ${VDOFIL}" || VDOFIL="$(get_file_dialog "$(realpath ${VDOFIL})")"
      else
        VDOFIL="$(get_file_dialog)"
      fi
    fi

    VDOEXT="${VDOFIL##*.}"
    echo "VDOFIL=${VDOFIL#$(pwd)/}" > ${TMPDIR}/${SCRPNM}.tmp

    if [ -z ${OPWIDE+X} ] && [ -z ${OPHIGH+X} ] && [ -z ${FRMRAT+X} ] && [ -z ${VDODAR+X} ]; then
      HLPMSG='These properties were auto-detected.  Please verify them.'
      eval $(mediainfo "${VDOFIL}" | grep 'Width\|Height\|Display aspect ratio\|Frame rate' | grep -v 'mode\|spf' | sed 's/ *: /=/g;s/Display aspect ratio/VDODAR/g;s/Frame rate/FRMRAT/g;s/Height/OPHIGH/g;s/Width/OPWIDE/g;s/ pixels//g;s/ FPS//gI;s/ //g;s/(.*)//g;s/\.0\+//g;s|:|/|g')
    else
      HLPMSG='These properties were pulled from existing config.  Please verify them.'
    fi

    SPROPS="$(${DLGBIN} --stdout --title 'Source Video Properties' --form "${HLPMSG}" 12 36 0 ' Width:' 1 1 "${OPWIDE}" 1 9 5 0 'Height:' 2 1 "${OPHIGH}" 2 9 5 0 '   FPS:' 3 1 "${FRMRAT}" 3 9 7 0 '   DAR:' 4 1 "${VDODAR}" 4 9 5 0 | tr '\n' '-' | sed 's/-$//g' )"

    SPROP1=${SPROPS%-*-*}; SPROP2=${SPROPS#*-*-}
    OPWIDE=${SPROP1%-*};   OPHIGH=${SPROP1#*-}
    FRMRAT=${SPROP2%-*};   VDODAR=${SPROP2#*-}

    echo -e "OPWIDE=${OPWIDE}\nOPHIGH=${OPHIGH}\nFRMRAT=${FRMRAT}\nVDODAR=${VDODAR}" >> ${TMPDIR}/${SCRPNM}.tmp

    HLPMSG="Video will be expanded to the dimensions you specified earlier.\n\nLeaving the settings at all zeros leaves cropping disabled."

    CRSETS="$(${DLGBIN} --stdout --title 'Crop Settings' --form "${HLPMSG}" 16 36 0 '   Crop Top:' 1 1 "${CRPTOP}" 1 14 5 0 '  Crop Left:' 2 1 "${CRPLFT}" 2 14 5 0 'Crop Bottom:' 3 1 "${CRPBTM}" 3 14 5 0 ' Crop Right:' 4 1 "${CRPRIT}" 4 14 5 0 | tr '\n' '-' | sed 's/-$//g' )"

    CRSET1=${CRSETS%-*-*}; CRSET2=${CRSETS#*-*-}
    CRPTOP=${CRSET1%-*};   CRPLFT=${CRSET1#*-}
    CRPBTM=${CRSET2%-*};   CRPRIT=${CRSET2#*-}

    echo -e "CRPTOP=${CRPTOP}\nCRPLFT=${CRPLFT}\nCRPBTM=${CRPBTM}\nCRPRIT=${CRPRIT}" >> ${TMPDIR}/${SCRPNM}.tmp

    if [ -z ${VIP_TC+X} ] && [ -z ${VOP_TC+X} ]; then
      HLPMSG="Enter time codes in HH:MM:SS.mmm format."
    else
      HLPMSG="These values were pulled from an existing config.  Please verify them.  Enter time codes in HH:MM:SS.mmm format."
      TM_CDS="${VIP_TC}-${VOP_TC}"
    fi

    mpv --osd-fractions --osd-level=2 --loop=inf --pause "${VDOFIL}" &>/dev/null &

    while true; do
      TM_CDS="$(${DLGBIN} --stdout --title 'In/Out Points' --form "${HLPMSG}" 12 36 0 " In Point:" 1 1 "${TM_CDS%-*}" 1 12 13 0 "Out Point:" 2 1 "${TM_CDS#*-}" 2 12 13 0 | tr '\n' '-' | sed 's/-$//g' )"
      istc "${TM_CDS%-*}" && istc "${TM_CDS#*-}" && break
      ${DLGBIN} --title 'OOPS!' --msgbox 'Invalid time code for in/out points.  Try again.' 0 0
    done

    VIP_TC=${TM_CDS%-*}; echo "VIP_TC=${VIP_TC}" >> ${TMPDIR}/${SCRPNM}.tmp
    VOP_TC=${TM_CDS#*-}; echo "VOP_TC=${VOP_TC}" >> ${TMPDIR}/${SCRPNM}.tmp

    if [ -z ${MTLEAD+X} ] && [ -z ${MTLAST+X} ]; then
      MTLEAD=0
      MTLAST=0
    fi

    HLPMSG='If you want to mute the audio at the beginning or end of the video, enter length of time here in seconds.'
    MUTSET="$(${DLGBIN} --stdout --title 'Mute Setting' --form "${HLPMSG}" 0 0 0 "Mute first seconds of audio:" 1 1 "${MTLEAD}" 1 30 5 0 " Mute last seconds of audio:" 2 1 "${MTLAST}" 2 30 5 0 | tr '\n' '-' | sed 's/-$//g' )"
    echo "MTLEAD=${MUTSET%-*}" >> ${TMPDIR}/${SCRPNM}.tmp
    echo "MTLAST=${MUTSET#*-}" >> ${TMPDIR}/${SCRPNM}.tmp

    if [ "${IPCRNG}" == pc ]; then
      TVSLCT=off; PCSLCT=on
    else
      TVSLCT=on; PCSLCT=off
    fi

    HLPMSG="What is the luma range in the source?\n\nOptical media typically uses Limited RGB.\n\nGame consoles output to Limited RGB unless you set them to use Full RGB.\n\nYou can take a snapshot from a video player and analyze the levels in an image editor if you are not sure."
    IPCRNG=$(${DLGBIN} --stdout --backtitle "Source Luma Scale" --radiolist "${HLPMSG}" 0 0 2 tv "Limited RGB (16-235)" ${TVSLCT} pc "Full RGB (0-255)" ${PCSLCT})
    echo "IPCRNG=${IPCRNG}" >> ${TMPDIR}/${SCRPNM}.tmp

    if [ "${OPCRNG}" == pc ]; then
      TVSLCT=off; PCSLCT=on
    else
      TVSLCT=on; PCSLCT=off
    fi

    HLPMSG="What is the luma range you would like in the output?\n\nLimited RGB will look slightly washed out on computer displays but fine on video displays.\n\nFull RGB will crush shadows and lights on video displays but look fine on computer displays."
    OPCRNG=$(${DLGBIN} --stdout --backtitle "Output Luma Scale" --radiolist "${HLPMSG}" 0 0 2 tv "Limited RGB (16-235)" ${TVSLCT} pc "Full RGB (0-255)" ${PCSLCT})
    echo "OPCRNG=${OPCRNG}" >> ${TMPDIR}/${SCRPNM}.tmp

    case "${PVWIDE}x${PVHIGH}" in
      '768x432') SELDAR=off; SEL169=on; SLCT43=off; break;;
      '640x480') SELDAR=off; SEL169=off; SLCT43=on; break;;
              *) SELDAR=on; SEL169=off; SLCT43=off; break;;
    esac

    HLPMSG="The preview video should be small (approx. 480p).\n\nCorrect way: Use the DVD standard 720x480 and set the DAR accordingly.\n\nCompatible way: Use 768x432 or 640x480 because some video players will not apply DAR correctly."
    OP_RES=$(${DLGBIN} --stdout --backtitle "Preview Size" --radiolist "${HLPMSG}" 0 0 3 '720x480' 'Use DAR (345600 pixels)' "${SELDAR}" '768x432' '1:1 for 16:9 (331776 pixels)' "${SEL169}" '640x480' '1:1 for 4:3 (307200 pixels)' "${SLCT43}")
    echo -e "PVWIDE=${OP_RES%x*}\nPVHIGH=${OP_RES#*x}" >> ${TMPDIR}/${SCRPNM}.tmp

    if ! ask_copy_cfg 'ADPEAK'; then
      ${DLGBIN} --infobox "\n Determining peak audio level..." 5 38
      ADPEAK="$(ffmpeg -i "${VDOFIL}" -ss "${VIP_TC}" -to "${VOP_TC}" -af "volumedetect" -f null /dev/null 2>&1 | grep max_volume | cut -d- -f2 | cut -d\  -f1)"
      echo "ADPEAK=${ADPEAK}" >> ${TMPDIR}/${SCRPNM}.tmp
      ${DLGBIN} --msgbox "\n Peak audio level of -${ADPEAK}dB added to config." 7 51
    fi

    sort -u ${TMPDIR}/${SCRPNM}.tmp > ./${SCRPNM}.cfg; rm ${TMPDIR}/${SCRPNM}.tmp
    ;;

  normalize)

    [ ! -s normalize.mkv ] && mv normalize.mp4 normalize.mkv || rm normalize.mp4

    VDOEXT="${2##*.}"

    MSSG01="Determining peak audio level..."
    MSSG02="Normalizing audio..."

    if [ "${INTERACTIVE}" = "0" ]; then
      msg "${MSSG01}"
    else
      ${DLGBIN} --infobox "\n â ${MSSG01}\n   ${MSSG02}" 6 40
    fi

    ADPEAK="$(ffmpeg -i "${2}" -af "volumedetect" -f null /dev/null 2>&1 | grep max_volume | cut -d- -f2 | cut -d\  -f1)"
    A_FLTR="volume=${ADPEAK}dB,volume=enable=between'(t,0,0)':volume=0"

    if [ "${INTERACTIVE}" = "0" ]; then
      msg "${MSSG02}"
    else
      ${DLGBIN} --infobox "\n â ${MSSG01}\n â ${MSSG02}" 6 40
    fi

    ffmpeg ${FFOPTS} -i "${2}" -c:v copy -af ${A_FLTR} -c:a aac ${YTASET} normalize.mkv

    msg "Finished creating normalize.mkv."

    ;;

  preview)

    [ ! -s preview.mkv ] && mv preview.mp4 preview.mkv || rm preview.mp4

    case ${2} in
      ''|*[!0-9]*) msg 'Invalid or no custom duration specified.' ;;
      *) DURATN=${2} ;;
    esac

    T_FLTR=${V_FLTR/${OPWIDE}/${PVWIDE}}
    P_FLTR=${T_FLTR/${OPHIGH}/${PVHIGH}}

    msg "Creating preview video of length $(sec2tc "${DURATN}")..."
    ffmpeg ${FFOPTS} -i "${VDOFIL}" -ss "${VIP_TC}" -to "${VOP_TC}" -vf ${P_FLTR} -c:v libx264 -preset faster -crf 30 -af ${A_FLTR} -c:a libopus -b:a 48k preview.mkv
    msg 'Finished preview video.'
    ;;

  vcap)

    [[ ! -s ${SCRPNM}.cfg ]] && msg "File ${SCRPNM}.cfg not found.  Run '${SCRPNM} set' first." && exit 1

    shift

    VDOEXT="mp4"
    VDOBGN="after"

    for OPTARG in "${@}"; do
      case "${OPTARG}" in
        mkv) shift ; VDOEXT=mkv ;;
        mp4) shift ; VDOEXT=mp4 ;;
        ifb) shift ; VDOBGN="before" ;;
        ifa) shift ; VDOBGN="after" ;;
        *)   echo "Uknown option ${OPTARG}" ; [[ ! -s vcap.mp4 ]] && rm vcap.mp4 ; exit 1 ;;
      esac
    done

    [[ "${VDOEXT}" != "mp4" ]] && [[ ! -s vcap.mp4 ]] && mv vcap.mp4 vcap.${VDOEXT}

    VIPSEC=$(tc2sec "${VIP_TC}")

    for IFDRTN in 5 20 35; do
      [[ $(bc <<< "${VIPSEC} < ${IFDRTN}") == 1 ]] && RISTRT=0 || RISTRT=$(bc <<< "${VIPSEC} - ${IFDRTN}")
      RISTOP="$(bc <<< "${VIPSEC} + ${IFDRTN}")"
      [[ $(bc <<< "${RISTOP} > ${VOPSEC}") == 1 ]] && RISTOP="${VOPSEC}"
      RIDRTN="$(bc <<< "${RISTOP} - ${RISTRT}")"

      msg "Generating list of I-frames from ${RISTRT}s to ${RISTOP}s (duration ${RIDRTN})..."
      ffprobe -v fatal -select_streams v -show_frames -show_entries frame=pict_type,pkt_pts_time -read_intervals "${RISTRT}%+${RIDRTN}" -of csv "${VDOFIL}" | grep I | cut -d, -f2 > ${TMPDIR}/vcap.ift
      msg "I-frames found at $(cat ${TMPDIR}/vcap.ift | tr '\n' ' ')"

      [ -s ${TMPDIR}/vcap.ift ] && break
    done

    STRTTM=$(ffprobe -v fatal -select_streams v -show_streams -show_entries stream=start_time -of csv "${VDOFIL}" | grep program | cut -d, -f3 | tr -d '\n')
    [ "${STRTTM}" == "" ] && STRTTM=0
    msg "Stream time stamps start at ${STRTTM}s -- adjusting time stamps..."

    while read -r FRAME; do
      bc <<< "${FRAME} - ${STRTTM}" | xargs printf '%01.3f\n'
    done < ${TMPDIR}/vcap.ift > ${TMPDIR}/vcap.ifl
    rm ${TMPDIR}/vcap.ift
    msg 'I-frame list generation complete.'

    msg "Calculating closest I-frame ${VDOBGN} in-point..."
    cp ${TMPDIR}/vcap.ifl ${TMPDIR}/vcap.ifc
    echo "${VIPSEC}" >> ${TMPDIR}/vcap.ifc
    sort -n ${TMPDIR}/vcap.ifc > ${TMPDIR}/vcap.ifs
    rm ${TMPDIR}/vcap.ifc
    [[ ${VDOBGN} == "after" ]] && TIPSEC=$(grep -A 1 "${VIPSEC}" ${TMPDIR}/vcap.ifs | tail -1 | tr -d '\n')
    [[ ${VDOBGN} == "before" ]] && TIPSEC=$(grep -B 1 "${VIPSEC}" ${TMPDIR}/vcap.ifs | head -1 | tr -d '\n')
    msg "Closest I-frame ${VDOBGN} ${VIPSEC}s is ${TIPSEC}s"
    rm ${TMPDIR}/vcap.ifs
    TOPSEC=${VOPSEC}
    TRMDUR=$(bc <<< "${TOPSEC} - ${TIPSEC}")

    msg "Creating ${VDOEXT^^} video from ${VDOFIL}, for $(sec2tc "${TRMDUR}") ($(sec2tc "${TIPSEC}") to $(sec2tc "${TOPSEC}"))"
    ffmpeg ${FFOPTS} -i "${VDOFIL}" -ss "${VIP_TC}" -to "${VOP_TC}" -c:v copy \
      -af ${A_FLTR} -c:a aac ${YTASET} -shortest vcap.${VDOEXT}
    msg "Finished creating vcap.${VDOEXT}."

    ;;

  youtube)

    case "${2}" in
      max30) CRF=20 ;; # Actual 28.1
      max40) CRF=17 ;; # Actual 39.0
      max50) CRF=15 ;; # Actual 47.9
      max60) CRF=13 ;; # Actual 58.1
      max70) CRF=11 ;; # Actual 70.3
      max80) CRF=10 ;; # Actual 77.5
      max*)  echo "${2} is undefined." ; exit 1 ;;
      *)     CRF=22 ;;
    esac

    msg "Using CRF ${CRF} to create video for $(sec2tc "${DURATN}") (${VIP_TC} to ${VOP_TC}) from ${VDOFIL}."
    ffmpeg ${FFOPTS} -i "${WRKFIL}" -ss "${VIP_TC}" -to "${VOP_TC}" \
      -vf ${V_FLTR} -c:v libx264 ${OPSET1} -crf ${CRF} ${YTVSET} ${OPSET2} \
      -af ${A_FLTR} -c:a aac ${YTASET} "${OUTFIL}"
    msg "Finished video from ${VIP_TC} to ${VOP_TC} in ${WRKFIL}."
    ;;

  portable)

    msg "Creating video from ${VDOFIL}, for $(sec2tc "${DURATN}") (${VIP_TC} to ${VOP_TC})"
    ffmpeg ${FFOPTS} -i "${WRKFIL}" -ss "${VIP_TC}" -to "${VOP_TC}" \
      -vf ${V_FLTR} -c:v libx264 ${OPSET1} -crf 29 ${OPSET2} \
      -af ${A_FLTR} -c:a aac ${YTASET} "${OUTFIL}"
    msg "Finished video from ${VIP_TC} to ${VOP_TC} in ${WRKFIL}."
    ;;

  lossless)

    [ ! -s lossless.mkv ] && mv lossless.mp4 lossless.mkv || rm lossless.mp4

    ffmpeg ${FFOPTS} -i "${VDOFIL}" -ss "${VIP_TC}" -to "${VOP_TC}" \
      -vf ${V_FLTR} -c:v ffv1 -level 3 -threads 6 -coder 1 -context 1 -g 1 -slices 6 -slicecrc 1 \
      -af ${A_FLTR} -c:a flac -compression_level 12 lossless.mkv
    ;;

  join)

    JOINS=0
    shift

    while test $# -gt 0; do
      if [[ ${1} == max?? ]]; then
        case "${1}" in
          max30) CRF=20 ;; # Actual 28.1
          max40) CRF=17 ;; # Actual 39.0
          max50) CRF=15 ;; # Actual 47.9
          max60) CRF=13 ;; # Actual 58.1
          max70) CRF=11 ;; # Actual 70.3
          max80) CRF=10 ;; # Actual 77.5
          max*)  echo "${1} is undefined." ; exit 1 ;;
          *)     CRF=22 ;;
        esac
      else
        ((JOINS++))
        JOINSF=$(printf "%04d" $JOINS)
        if [ -s join${JOINSF}.mkv ]; then
          echo "Lossless copy of ${1} exists.  Skipping."
        else
          if [ "${1}" == "vc" ]; then
            msg "Creating FLV1 lossless video clip for $(sec2tc "${DURATN}") (${VIP_TC} to ${VOP_TC}) from ${VDOFIL}."
            ffmpeg ${FFOPTS} -i "${VDOFIL}" -ss "${VIP_TC}" -to "${VOP_TC}"\
              -vf ${V_FLTR} -c:v ffv1 -level 3 -threads 6 -coder 1 -context 1 -g 1 -slices 6 -slicecrc 1 \
              -af ${A_FLTR} -c:a flac -compression_level 12 join${JOINSF}.mkv
            [[ $? != 0 ]] && msg 'Error creating lossless copy.' && exit 1
            msg 'Finished lossless copy.'
          else
            if [ -s "${1}" ]; then
              msg "Creating FLV1 lossless copy of ${1}..."
              ffmpeg ${FFOPTS} -i "${CDBAIT}" -vf ${V_FLTR} \
                -c:v ffv1 -level 3 -threads 6 -coder 1 -context 1 -g 1 -slices 6 -slicecrc 1 -c:a flac -compression_level 12 join${JOINSF}.mkv
              [[ $? != 0 ]] && msg "Error creating copy of ${1}." && exit 1
              msg "Created lossless copy of ${1}."
            else
              msg "File '${1}' does not exist or is 0 bytes." && exit 1
            fi
          fi
        fi
      fi
      shift
    done

    msg 'Combining videos...'

    for ((JOINLP=1; JOINLP<=JOINS; JOINLP++)); do
      JFILES+="-i join$(printf "%04d" ${JOINLP}).mkv "
      FILTER+="[$((${JOINLP} - 1)):v:0] [$((${JOINLP} - 1 )):a:0] "
    done

    ffmpeg ${FFOPTS} ${JFILES} -filter_complex "${FILTER} concat=n=${JOINS}:v=1:a=1 [v] [a]" \
      -map "[v]" -map "[a]" -c:v libx264 ${OPSET1} -crf ${CRF} ${YTVSET} ${OPSET2} \
      -c:a aac ${YTASET} temp.mp4
    [[ $? != 0 ]] && msg 'Error combining videos.' && exit 1
    mv temp.mp4 join.mp4
    msg 'Finished combining videos.'
    ;;

  splitav)

    [ ! -s "${2}" ] && echo "${2} does not exist or is 0 bytes." && exit 1
    VDOEXT="${2##*.}"
    msg "Separating audio and video from ${2}..."
    ffmpeg ${FFOPTS} -i "${2}" -map 0:v:0 -c:v copy video.${VDOEXT} -map 0:a:0 -c:a copy audio.mp2
    [[ $? != 0 ]] && msg "Error separating video and audio from ${2}." && exit 1
    msg "Finished separating video and audio from ${2}."
    ;;

  csav)

    msg "Combining video from ${2} with audio from ${3}..."
    ffmpeg ${FFOPTS} -i "${2}" -i "${3}" -c copy -map 0:v:0 -map 1:a:0 -shortest yt.mp4
    [[ $? != 0 ]] && msg "Error combining video from ${2} with audio from ${3}." && exit 1
    msg "Finished Combining video in ${2} with audio from ${3}."
    ;;

  fixar)

    [ ! -s "${2}" ] && echo "${2} does not exist or is 0 bytes." && exit 1
    VDOEXT="${2##*.}"
    ffmpeg ${FFOPTS} -i "${2}" -aspect "${3}" -c copy fixar.${VDOEXT}
    mv fixar.${VDOEXT} ${2}
    ;;

  homearch)

    VDOSET="-c:v libx264 -preset slower -crf 5 -qmin 0 -qmax 10 -refs 12 -bf 16 -profile:v high -level 4.2"
    AUDSET="-c:a flac -compression_level 12"

    msg "Creating home archive from ${VIP_TC} to ${VOP_TC} in ${VDOFIL}..."
    ffmpeg ${FFOPTS} -i "${VDOFIL}" -ss "${VIP_TC}" -to "${VOP_TC}" -vf ${V_FLTR} ${VDOSET} -af ${A_FLTR} ${AUDSET} homearch.mkv
    msg "Finished home archive from ${VIP_TC} to ${VOP_TC} in ${VDOFIL}."
    ;;

  thumb)

    [[ ! "${2}" =~ ^[+-]?[0-9]+([.][0-9]+)?$ ]] && echo "'${2}' is not a number.  ${0} thumb [number]" && exit

    if [ -f ${SCRPNM}.cfg ]; then
      [[ $(bc <<< "${2} > 0") == 1 ]] && TMCODE=$(bc <<< "${VIPSEC%.*} + ${2}") || TMCODE=$(bc <<< "${VOPSEC%.*} + ${2}")
      ffmpeg ${FFOPTS} -i "${VDOFIL}" -ss "${TMCODE}" -vframes 1 "tn$(printf "%07.2f" "${TMCODE}" | sed 's/\.//g').png"
    else
      shopt -s nullglob
      for DRFILE in *.{3gp,asf,avi,divx,evo,f4v,flv,m2ts,mkv,mov,mp4,mpg,ogg,ps,qt,ts,webm,wmv}; do
        if [ -f "${DRFILE}" ]; then
          if [[ $(bc <<< "${2} > 0") == 1 ]]; then
	    TMCODE="${2}"
	  else
	    DRFDUR=$(ffprobe -i "${DRFILE}" 2>&1 | grep Duration | cut -d: -f2- | cut -d, -f1 | sed 's/ //g')
	    TMCODE=$(bc <<< "$(tc2sec "${DRFDUR}") + ${2}")
	  fi
          ffmpeg ${FFOPTS} -i "${DRFILE}" -ss "${TMCODE}" -vframes 1 "${DRFILE%.*}_$(printf "%07.2f" "${TMCODE}" | sed 's/\.//g').png"
        fi
      done
    fi
    ;;

  all)

    shift
    PROCES="${1}"

    shift
    if [ "${1}" == "dryrun" ]; then
      DRYRUN=true
      shift
    else
      DRYRUN=false
    fi

    case "${PROCES}" in
      join|lossless|portable|preview|vcap|youtube)
        FDFILE="vcproc.cfg"
        ;;
      normalize|remux|set|splitav|trim)
        FDFILE="${1}"
        ;;
      *)
        echo "Can't run ${PROCES} on multiple directories"
        exit 1
        ;;
    esac

    while read -r -d '' LOCATN; do
      LOCTRM="${LOCATN%/${FDFILE}}"
      TARGET+=("$(stat -c %Y "${LOCTRM#./}/${FDFILE}"):${LOCTRM#./}")
    done < <(find -name "${FDFILE}" -print0)

    set -f
    IFS=$'\n' TGTSRT=($(sort <<<"${TARGET[*]}"))
    unset IFS
    set +f

    TARGET=()
    for ELMENT in "${TGTSRT[@]}"; do
      TARGET+=("${ELMENT#*:}")
    done

    if ${DRYRUN}; then
      IFS=$'\n'
      msg 'DRYRUN: The following directories will be worked on:'
      echo "${TARGET[*]}"
      unset IFS
    else
      CURDIR="$(pwd)"
      for DRCTRY in "${TARGET[@]}"; do
        cd "${DRCTRY}"
        FDFILE="$(ls -U ${PROCES}.{mkv,mp4,ts} 2> /dev/null)"
        if [ "${FDFILE}" == "" ]; then
          echo -e "\e[1;92m:: Working on ${DRCTRY}\e[0m"
          "${SCRPNM}" "${PROCES}" $@
        else
          echo "${DRCTRY}/${FDFILE} exists -- skipping."
        fi
        cd "${CURDIR}"
      done
    fi
    ;;

esac

if [[ "|portable|youtube|" == *"|${1}|"* ]]; then
  if [ ! -z ${USETMP+X} ]; then
    msg "Moving ${OUTFIL} to ${1}.mp4"
    mv "${OUTFIL}" ${1}.mp4
    msg 'Cleaning up...'
    rm "${WRKFIL}"
  fi
fi
